// <auto-generated />
using System;
using JMLS.RestAPI.Infrastructure.Persistence.SQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JMLS.RestAPI.Migrations
{
    [DbContext(typeof(JmlsDbContext))]
    partial class JmlsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JMLS.Domain.Activities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the activity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Type or category of the activity");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime")
                        .HasComment("Timestamp when the offer was created");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedDateTime")
                        .HasComment("Timestamp when the offer was last updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Optional detailed description of the activity");

                    b.Property<TimeSpan?>("ExpirationPeriod")
                        .HasColumnType("time")
                        .HasComment("Optional time span after which the earned points from this activity expire");

                    b.Property<int>("PointsReward")
                        .HasColumnType("int")
                        .HasComment("Number of points rewarded for completing the activity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Title or name of the activity");

                    b.HasKey("Id");

                    b.ToTable("Activities", (string)null);
                });

            modelBuilder.Entity("JMLS.Domain.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("JMLS.Domain.Offers.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the offer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Value or discount amount associated with the offer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComment("Unique code representing this offer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime")
                        .HasComment("Timestamp when the offer was created");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedDateTime")
                        .HasComment("Timestamp when the offer was last updated");

                    b.Property<int>("PointsCost")
                        .HasColumnType("int")
                        .HasComment("Points required by the customer to redeem this offer");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the entity this offer is linked to (e.g., product ID)");

                    b.Property<string>("ReferenceType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Type of the entity referenced by this offer (e.g., product, category)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Classification or type of the offer");

                    b.HasKey("Id");

                    b.ToTable("Offers", (string)null);
                });

            modelBuilder.Entity("JMLS.Domain.Points.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the points record");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Total available points for the customer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the customer who owns this points record");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime")
                        .HasComment("Date and time when this points record was created");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedDateTime")
                        .HasComment("Date and time when this points record was last updated");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Points", (string)null);
                });

            modelBuilder.Entity("JMLS.Domain.Points.PointEarned", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for this earned points record");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime")
                        .HasComment("Date and time when this earned points record was created");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedDateTime")
                        .HasComment("Date and time when this earned points record was last updated");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Expiration date of the earned points, if applicable");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.Property<int>("PointValue")
                        .HasColumnType("int")
                        .HasColumnName("PointsReward")
                        .HasComment("Number of points earned from the associated activity");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the entity this earn is linked to (e.g., purchasesId, SocialMedia activity , ...)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("PointId");

                    b.ToTable("PointsEarned", (string)null);
                });

            modelBuilder.Entity("JMLS.Domain.Points.PointSpent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the point account");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime")
                        .HasComment("Date and time when the point account was created");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedDateTime")
                        .HasComment("Date and time when the point account was last modified");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.Property<int>("PointValue")
                        .HasColumnType("int")
                        .HasColumnName("PointsCost")
                        .HasComment("Current point balance for the customer");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("PointId");

                    b.ToTable("PointsSpent", (string)null);
                });

            modelBuilder.Entity("JMLS.Domain.Points.Point", b =>
                {
                    b.HasOne("JMLS.Domain.Customers.Customer", "Customer")
                        .WithOne("Point")
                        .HasForeignKey("JMLS.Domain.Points.Point", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Points_Customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("JMLS.Domain.Points.PointEarned", b =>
                {
                    b.HasOne("JMLS.Domain.Activities.Activity", "Activity")
                        .WithMany("PointsEarned")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PointsEarned_Activity");

                    b.HasOne("JMLS.Domain.Points.Point", "Point")
                        .WithMany("PointsEarned")
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PointsEarned_Point");

                    b.Navigation("Activity");

                    b.Navigation("Point");
                });

            modelBuilder.Entity("JMLS.Domain.Points.PointSpent", b =>
                {
                    b.HasOne("JMLS.Domain.Offers.Offer", "Offer")
                        .WithMany("PointsSpent")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JMLS.Domain.Points.Point", "Point")
                        .WithMany("PointsSpent")
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PointsSpent_Point");

                    b.Navigation("Offer");

                    b.Navigation("Point");
                });

            modelBuilder.Entity("JMLS.Domain.Activities.Activity", b =>
                {
                    b.Navigation("PointsEarned");
                });

            modelBuilder.Entity("JMLS.Domain.Customers.Customer", b =>
                {
                    b.Navigation("Point");
                });

            modelBuilder.Entity("JMLS.Domain.Offers.Offer", b =>
                {
                    b.Navigation("PointsSpent");
                });

            modelBuilder.Entity("JMLS.Domain.Points.Point", b =>
                {
                    b.Navigation("PointsEarned");

                    b.Navigation("PointsSpent");
                });
#pragma warning restore 612, 618
        }
    }
}
